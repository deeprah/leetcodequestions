class Solution {
public:

void merge(vector<int> &arr, int low, int mid, int high) {
    int left = low;
    int right = mid + 1;
    vector<int> temp;

    // Merging the two halves into temp vector
    while (left <= mid && right <= high) {
        if (arr[left] < arr[right]) {
            temp.push_back(arr[left]);
            left++;
        } else {
            temp.push_back(arr[right]);
            right++;
        }
    }

    // Copy the remaining elements of the left half
    while (left <= mid) {
        temp.push_back(arr[left]);
        left++;
    }

    // Copy the remaining elements of the right half
    while (right <= high) {
        temp.push_back(arr[right]);
        right++;
    }

    // Copy the sorted elements back into the original array
    for (int i = low; i <= high; i++) {
        arr[i] = temp[i - low];
    }
}
 
    int countsorts(vector<int> &arr,int low,int mid,int high){
        int count=0;
        int right=mid+1;
        for(int i=low;i<=mid;i++)
        {
            while (right <= high && static_cast<long long>(arr[i]) > 2 * static_cast<long long>(arr[right]))
            {right++;
            }
            count+=(right-(mid+1));
            
        }
        return count;
    }

int  mergesort(vector<int> &arr, int low, int high) {
    int count=0;
    if (low < high) {
        int mid = (low + high) / 2;
        count+=mergesort(arr, low, mid);
        count+=mergesort(arr, mid + 1, high);
       count+= countsorts(arr,low,mid,high);
        merge(arr, low, mid, high);
    }
     return count;
}

    int reversePairs(vector<int>& nums) {
        int n=nums.size();
        return mergesort(nums,0,n-1);
    
       
       
    }
};
